version: '3.8'

services:

  nginx:    
    image: nginx
    container_name: nginx
    volumes:
      - ./frontend-ui-files/html:/usr/share/nginx/html 
      - ./frontend-ui-files/css:/usr/share/nginx/html/css 
      - ./frontend-ui-files/conf/default.conf:/etc/nginx/conf.d/default.conf       
      - ./frontend-ui-files/log:/var/log/nginx
      # SCENE: ENSURE TO GENERATE AND PROVIDE THE PROPER CERTIFICATES (standalone and wildcard certificates)
      - ./frontend-ui-files/conf/nginx.crt:/etc/ssl/certs/cert.crt
      - ./frontend-ui-files/conf/nginx.key:/etc/ssl/private/cert.key   
      - ./frontend-ui-files/conf/wild.scene.local.crt:/etc/ssl/certs/wildcardscene.crt
      - ./frontend-ui-files/conf/wild.scene.local.key:/etc/ssl/private/wildcardscene.key   
      # SCENE: ENDURE TO GENERATE A PASSWORD FILE FOR NIFI ACCESS
      - ./frontend-ui-files/auth/nifi.htpasswd:/etc/nginx/auth/nifi.htpasswd  # password file
    ports:
       - "80:80"  
       - "443:443"             
    networks:
        - scene   


  jupyter:
    image: jupyter/minimal-notebook:latest
    container_name: jupyter
    # Uncomment this if you want to allow the port to be accessible outside the Docker subnet (e.g. Proxy on another machine/IP)
    #ports:
    #  - "8888:8888"  
    environment:
      - JUPYTER_ENABLE_LAB=yes
    volumes:
      # Folder to store notbeooks
      - ./jupyter_data/notebooks:/home/jovyan/examples 
      # SCENE: ENSURE TO GENERATE THE WILDCARD SSL certificat
      - ./jupyter_data/ssl/wild.scene.local.crt:/etc/ssl/certs/wildcardscene.crt
    networks:
      - scene
    command: >
      start-notebook.sh --NotebookApp.token=''  # Removes token to simplify local access
    user: root  # Allows to install packages within the container
    entrypoint: >
      /bin/bash -c "pip install minio && start-notebook.sh --NotebookApp.token=''"


  trino:
    image: trinodb/trino:latest
    container_name: trino
    ports:
      - "8082:8080"   # Trino UI
    environment:
      #- TRINO_PASSWORD_AUTHENTICATION_ENABLED=true
      - TRINO_LOG_LEVEL=DEBUG
    volumes:
      - ./trino/data:/data/trino
      # SCENE: CONFIGURATION FILES. CHECK THEM TO ADAPT TO YOUR NEEDS 
      - ./trino/etc/config.properties:/etc/trino/config.properties
      - ./trino/etc/node.properties:/etc/trino/node.properties      
      - ./trino/etc/password.db:/etc/trino/password.db
      - ./trino/etc/jvm.config:/etc/trino/jvm.config
      - ./trino/etc/iceberg.properties:/etc/trino/catalog/iceberg.properties      
    networks:
      - scene

  node-red:
    image: nodered/node-red:latest
    container_name: nodered
    environment:
      - TZ=Europe/Amsterdam
    ports:
      - "1880:1880"    
    volumes:
      - ./node-red-data:/data
    networks:
        - scene   

  mongodb:
    image: mongo:latest
    container_name: mongo
    restart: always
    #command: --nojournal
    environment:
      # SCENE: UPDATE IT WITH YOUR CREDENTIALS
      MONGO_INITDB_ROOT_USERNAME: my_admin_user
      MONGO_INITDB_ROOT_PASSWORD: my_admin_password
    volumes:
        - ./ot-mongodata:/data/db
    #ports:
    #    - 27017:27017    
    networks:
        - scene  
  
  mongo-express:
    image: mongo-express:latest
    restart: always
    #ports:
    #  - "8081:8081"
    environment:
      # SCENE: ALIGN IT WITH THE MONGODB CONTAINER, IF NEEDED
      - ME_CONFIG_MONGODB_ADMINUSERNAME=my_admin_user
      - ME_CONFIG_MONGODB_ADMINPASSWORD=my_admin_password 
      - ME_CONFIG_MONGODB_SERVER=mongodb
      - ME_CONFIG_MONGODB_PORT=27017

      # SCENE: UPDATE IT WITH YOUR CREDENTIALS
      - ME_CONFIG_BASICAUTH=true
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD=scene2024
    networks:
        - scene  
  
  nifi:
    image: apache/nifi:latest
    tty: true
    container_name: nifi
    ports:
      #- "8080:8080"   # HTTP port (Optional)
      - "8443:8443"   #  HTTPS port
    environment:
      - NIFI_WEB_HTTP_PORT=
      - NIFI_WEB_HTTPS_PORT=8443

      # SCENE: ENSURE TO PROVIDE THE CERTIFICATE IN P12 FORMAT, AND ASSIGN PASSWORD 
      - NIFI_SECURITY_KEYSTORE=/opt/certs/nifi.p12
      - NIFI_SECURITY_KEYSTORE_TYPE=PKCS12
      - NIFI_SECURITY_KEYSTORE_PASSWORD=my_keystore_password  

      # SCENE: ENSURE TO PROVIDE THE CERTIFICATE IN P12 FORMAT, AND ASSIGN PASSWORD     
      - NIFI_SECURITY_TRUSTSTORE=/opt/certs/nifi-truststore.p12
      - NIFI_SECURITY_TRUSTSTORE_TYPE=PKCS12       
      - NIFI_SECURITY_TRUSTSTORE_PASSWORD=my_truststore_password

      - NIFI_WEB_PROXY_HOST=nifi.scene.local:8443,localhost:8443  # if proxy used/needed      
    volumes:
      # SCENE: CERTS FOLDER (just place here the files: nifi.csr, nifi.key, niti-trusstore, etc.)
      - ./nifi-certs:/opt/certs   

      # SCENE: CONFIGURATION TO ADD USERS (change it according to your needs, example is available)
      - ./nifi-conf/authorizers.xml:/opt/nifi/nifi-current/conf/authorizers.xml:ro     
      - ./nifi-conf/login-identity-providers.xml:/opt/nifi/nifi-current/conf/login-identity-providers.xml:ro
    restart: always
    networks:
      - scene
   

  minio:
    container_name: minio   
    image: minio/minio
    
    # Uncomment this if you want to expose the port for testing purposes. Otherwise, only NGINX will be able to access as they use the same network ('scene')
    #ports:
    #  - "9000:9000"
    #  - "9001:9001"
    
    volumes:
      - ./minio_data:/data     
      #- ./minio_config/config.json:/root/.minio/config.json:ro  
    environment:
      
      # SCENE: SET YOUR CREDENTIALS HERE
      MINIO_ROOT_USER: 'my_root_user'
      MINIO_ROOT_PASSWORD: 'my_root_password'

      
      # SCENE: SET YOUT DOMAIN HERE (should be ocnsistent with 'default.conf' file for nginx)
      MINIO_DOMAIN: s3api.scene.local      


       
      # SCENE: SET YOUT DOMAIN HERE (should be ocnsistent with 'default.conf' file for nginx)       
      MINIO_SERVER_URL: https://s3api.scene.local      
      

      # SCENE: SET YOUT DOMAIN HERE (should be ocnsistent with 'default.conf' file for nginx)            
      MINIO_BROWSER_REDIRECT_URL: https://s3ui.scene.local
      
      
    command: server --console-address ":9001" /data
    networks:
        - scene     

  keycloak:    
    image: quay.io/keycloak/keycloak
    container_name: keycloak
    environment:      
      # SCENE: SET YOUR CREDENTIALS HERE
      - KEYCLOAK_ADMIN=my_admin_user
      - KEYCLOAK_ADMIN_PASSWORD=my_admin_password

      # SCENE: SET YOUT DOMAIN HERE (should be ocnsistent with 'default.conf' file for nginx)   
      - KC_HOSTNAME=keycloak.scene.local  
      #- KC_CORS=true
    command: >
      start-dev       
      --proxy-headers=xforwarded    
      
     # Uncomment this if you want to expose the port for testing purposes. Otherwise, only NGINX will be able to access as they use the same network ('scene')
    #ports:
    #  - 8081:8080   # HTTP      
    
    networks:
      - scene
    volumes:
      - ./keycloak_data:/opt/keycloak/data
      


  webvowl:    
    
    # SCENE: YOU SHOULD FIRST BUILD YOUR OWN DOCKER IMAGE (see docker-build)
    image: webvowl2
    container_name: webvowl  

      
    # Uncomment this if you want to expose the port for testing purposes. Otherwise, only NGINX will be able to access as they use the same network ('scene')
    #ports:
    #   - "8080:8080"                   
    
    networks:
        - scene   
    



networks:
  scene:
    # Use a custom driver
    #driver: custom-driver-1
